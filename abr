#!/bin/bash

# apt-get install adb qpdf rsync

set -e

ADB='adb -d'
ABR_DIR="$(dirname "$(readlink -f "$0")")"
ADB_BACKUP_DIR='adb_backup'
RAW_BACKUP_DIR='raw_backup'
SPEFIAL_BACKUP_DIR="$RAW_BACKUP_DIR/spefial"
RSYNC_LOCAL_PORT='1873'
RSYNC_BASE_PATH="rsync://backup@127.0.0.1:${RSYNC_LOCAL_PORT}"
RSYNC_PASSWORD=''
ADB_ROOT_FLAG=''
RSYNC_START_FLAG=''

usage() {
    cat <<EOF >&2
USAGE: $(basename "$0") [-hx] subcommand [options ...]
OPTIONS:
  -h                               | help
  -x                               | debug
SUBCOMMANDS:
ab  | adb_backup [<app...>]        | create adb backup
alb | adb_list_backup <backup>     | list apps in adb backup
ali | adb_list_installed [-3] [-f] | list installed apps
aln | adb_list_nobackup <backup>   | list apps without ALLOW_BACKUP flag
ap  | adb_pack <app>               | pack app into adb backup
ar  | adb_restore <backup> <app>   | restore app in adb backup
aro | adb_root                     | adb root
au  | adb_unpack <backup> <app>    | unpack app in adb backup
aur | adb_unroot                   | adb unroot
ao  | appops <app>                 | list appops
aob | appops_backup <app>          | backup appops
aoba| appops_backup_all            | backup appops of all apps
aor | appops_restore <app>         | restore appops
aora| appops_restore_all           | restore appops of all apps
aosi| appops_set_ignore <app>      | set all appops to ignore
cp  | captive_portal               | tweak captive portal
dw  | doze_whitelist               | list apps whitelisted in doze
dwb | doze_whitelist_backup        | backup apps whitelisted in doze
dwr | doze_whitelist_restore       | restore apps whitelisted in doze
da  | disabled_app                 | list disabled apps
dab | disabled_app_backup          | backup list of disabled apps
dar | disabled_app_restore         | backup list of disabled apps
pab | pa_backup <app>              | backup permission and appops
paba| pa_backup_all                | backup permission and appops of all apps
par | pa_restore <app>             | restore permission and appops
para| pa_restore_all               | restore permission and appops of all apps
p   | permission <app>             | list permission
pb  | permission_backup <app>      | backup permission
pba | permission_backup_all        | backup permission of all apps
pr  | permission_restore <app>     | restore permission
pra | permission_restore_all       | restore permission of all apps
rb  | raw_backup <app>             | backup app by raw files
rba | raw_backup_all               | backup all apps by raw files
rbs | raw_backup_spefial           | backup spefial files
rr  | raw_restore <app>            | restore app by raw files
rrsb| raw_restore_spefial_bluetooth| restore bluetooth settings
rrsc| raw_restore_spefial_calllog  | restore calllog
rrsw| raw_restore_spefial_wifi     | restore wifi settings
rss | rsync_start                  | start rsync
rsst| rsync_stop                   | stop rsync
EOF
    exit 1
}

subcommand() {
    local command full_command
    command="$1"
    full_command="$(usage 2>&1 | awk -F'[ |]+' '/^SUBCOMMANDS:/ {flag=1;next} {if(flag && $1=="'"$command"'") {print $2}}')"
    if [ -n "$full_command" ]
    then
        echo "$full_command"
    else
        echo "$command"
    fi
}

action="$1"
if [ "$action" = '-x' ]
then
    set -x
    shift
    action="$1"
fi
action="$(subcommand "$action")"

adb_backup() {
    local app backup
    mkdir -p "$ADB_BACKUP_DIR"
    if [ -n "$1" ]
    then
        app=$*
        backup="${ADB_BACKUP_DIR}/${app// /_}.ab"
    else
        app="-all"
        backup="${ADB_BACKUP_DIR}/$(date +%Y-%m-%d).ab"
    fi
    $ADB backup -f "$backup" -apk $app
    for app in $(adb_list_backup "$backup")
    do
        pa_backup "$app"
    done
}

adb_list_backup() {
    local backup tmp_dir backup_list
    backup="$1"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    backup_list="$tmp_dir/$(basename "$backup").list"
    if [ "$backup" -nt "$backup_list" ]
    then
        tail -n +5 "$backup" \
            | zlib-flate -uncompress \
            | tar -tf - \
            | awk -F/ '{print $2}' \
            | uniq \
            | tee "$backup_list"
    else
        cat "$backup_list"
    fi
}

adb_list_installed() {
    if $ADB shell which cmd >/dev/null; then
        $ADB shell cmd package list packages "$@" | sed 's/^package://'
    else
        $ADB shell pm list packages "$@" | sed 's/^package://'
    fi
}

adb_list_nobackup() {
    local backup
    backup="$1"
    test -z "$backup" && usage
    adb_list_installed -3 | grep -vFxf <(adb_list_backup "$backup") | sort
}

adb_pack() {
    local dir app tmp_dir
    dir="$1"
    test -d "$dir" || usage
    app="$(basename "$dir")"
    tmp_dir="$(dirname "$dir")"
    tmp_dir="$(dirname "$tmp_dir")"
    (echo -ne 'ANDROID BACKUP\n1\n1\nnone\n' && tar -C "$tmp_dir" --format=ustar -cf - -T "${tmp_dir}/$app.list" | zlib-flate -compress) >"${tmp_dir}/$app.ab"
}

adb_restore() {
    local backup app tmp_dir
    backup="$1"
    app="$2"
    test -f "$backup" || usage
    test -z "$app" && usage
    adb_unpack "$backup" "$app"
    tmp_dir="$(dirname "$backup")/tmp"
    adb_pack "${tmp_dir}/apps/${app}"
    $ADB install "${tmp_dir}/apps/${app}/a/base.apk" || true
    $ADB restore "${tmp_dir}/${app}.ab"
    pa_restore "$app"
}

adb_root() {
    if [ -n "$ADB_ROOT_FLAG" ]
    then
        return
    fi
    ADB_ROOT_FLAG=1
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" != 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB root
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 1 && start adbd"'
        fi
        $ADB wait-for-device
    fi
}

adb_unpack() {
    local backup app tmp_dir app_list
    backup="$1"
    app="$2"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    app_list="$tmp_dir/$app.list"
    tail -n +5 "$backup" | zlib-flate -uncompress | tar -C "$tmp_dir" -xvf - "apps/$app" > "$app_list"
}

adb_unroot() {
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" = 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB unroot
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 0 && start adbd"'
        fi
        $ADB wait-for-device
    fi
    ADB_ROOT_FLAG=''
}

appops() {
    local app
    app="$1"
    test -z "$app" && usage
    $ADB shell cmd appops get "$app" | awk -F ' +|:|;' '{ if($3=="ignore" || $3=="allow") {print $1,$3} }' | grep -Ev '^(MONITOR_LOCATION|MONITOR_HIGH_POWER_LOCATION|NEIGHBORING_CELLS|READ_CALENDAR) ' || true
}

appops_backup() {
    general_backup "$RAW_BACKUP_DIR/$1/appops" "$@"
}

appops_backup_all() {
    foreach_3rd_party_app appops_backup
}

appops_restore() {
    app="$1"
    test -z "$app" && usage
    cat_file "$RAW_BACKUP_DIR/$app/appops" | while read -r op mode
    do
        $ADB shell -n cmd appops set "$app" "$op" "$mode"
    done
}

appops_restore_all() {
    foreach_3rd_party_app appops_restore
}

appops_set_ignore () {
    local app op
    app="$1"
    test -z "$app" && usage
    for op in $($ADB shell cmd appops get "$app" | awk -F: '{print $1}' | grep -Fv READ_CALENDAR || true)
    do
        $ADB shell cmd appops set "$app" "$op" ignore
    done
}

captive_portal() {
    $ADB shell settings put global captive_portal_server google.cn
    $ADB shell settings put global captive_portal_http_url http://google.cn/generate_204
    $ADB shell settings put global captive_portal_https_url https://google.cn/generate_204
}

cat_file() {
    local file
    file="$1"
    if [ ! -f "$file" ]
    then
        echo "file not exists." >&2
        return
    fi
    cat "$file"
}

disabled_app() {
    adb_list_installed -d
}

disabled_app_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/disabled_app"
}

disabled_app_restore() {
    cat_file "$SPEFIAL_BACKUP_DIR/disabled_app" | while read -r app
    do
        $ADB shell -n pm disable "$app"
    done
}

doze_whitelist() {
    $ADB shell dumpsys deviceidle whitelist | awk -F, '{if ($1=="user") print $2}'
}

doze_whitelist_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/doze_whitelist"
}

doze_whitelist_restore() {
    cat_file "$SPEFIAL_BACKUP_DIR/doze_whitelist" | while read -r app
    do
        $ADB shell -n dumpsys deviceidle whitelist "+${app}"
    done
}

foreach_3rd_party_app() {
    local app action
    for app in $(adb_list_installed -3)
    do
        for action in "$@"
        do
            "$action" "$app"
        done
    done
}

general_backup() {
    local file caller func output
    file="$1"
    shift
    caller="${FUNCNAME[1]}"
    func=${caller%_backup}
    if [ "$caller" = "$func" ]
    then
        return
    fi
    output="$("$func" "$@")"
    if [ -n "$output" ]
    then
        mkdir -p "$(dirname "$file")"
        echo "$output" >"$file"
    fi
}

pa_backup() {
    local app
    app="$1"
    test -z "$app" && usage
    permission_backup "$app"
    appops_backup "$app"
}

pa_backup_all() {
    foreach_3rd_party_app pa_backup
}

pa_restore() {
    local app
    app="$1"
    test -z "$app" && usage
    permission_restore "$app"
    appops_restore "$app"
}

pa_restore_all() {
    foreach_3rd_party_app pa_restore
}

permission() {
    local app
    app="$1"
    test -z "$app" && usage
    $ADB shell dumpsys package "$app" | awk -F' +|:|,' '/runtime permissions:$/{flag=1;next}/(:$|^$)/{flag=0} {if(flag) {if($4=="granted=true") {print $2, "grant"} else if($4=="granted=false") {print $2, "revoke"}}}'
}

permission_backup() {
    local app permission permission_file revoke
    app="$1"
    test -z "$app" && usage
    permission="$(permission "$app")"
    permission_file="$RAW_BACKUP_DIR/$app/permission"
    if [ -n "$permission" ]
    then
        if [ -e "$permission_file" ]
        then
            revoke="$(grep -vFxf <(echo "$permission") "$permission_file" | awk '{if($2=="grant") {print $1, "revoke"}}')"
            if [ -n "$revoke" ]
            then
                echo "$revoke"  >> "${permission_file}.revoke"
            fi
        fi
        echo "$permission" >"$permission_file"
    fi
}

permission_backup_all() {
    foreach_3rd_party_app permission_backup
}

permission_restore() {
    local app permission_file perm mode
    app="$1"
    test -z "$app" && usage
    for permission_file in "$RAW_BACKUP_DIR/$app/permission" "$RAW_BACKUP_DIR/$app/permission.revoke"
    do
        if [ -e "$permission_file" ]
        then
            while read -r perm mode
            do
                $ADB shell -n pm "$mode" "$app" "$perm"
            done < "$permission_file"
        fi
    done
}

permission_restore_all() {
    foreach_3rd_party_app permission_restore
}

raw_backup() {
    local app apk
    app="$1"
    test -z "$app" && usage
    $ADB shell am force-stop "$app"
    mkdir -p "$RAW_BACKUP_DIR/$app"
    apk="$($ADB shell pm path "$app")"
    apk="${apk:8}"
    rsync_start
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync "${RSYNC_BASE_PATH}${apk}" "$RAW_BACKUP_DIR/$app/$app.apk"
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "${RSYNC_BASE_PATH}/data/data/$app/" "$RAW_BACKUP_DIR/$app/data/"
    pa_backup "$app"
}

raw_backup_all() {
    raw_backup_spefial
    disabled_app_backup
    doze_whitelist_backup
    foreach_3rd_party_app raw_backup
}

raw_backup_spefial() {
    mkdir -p "$SPEFIAL_BACKUP_DIR/data"
    rsync_start
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --ignore-missing-args --files-from="$ABR_DIR/spefial.list" "${RSYNC_BASE_PATH}/data/" "$SPEFIAL_BACKUP_DIR/data/"
}

raw_restore() {
    local app user
    app="$1"
    test -z "$app" && usage
    $ADB install "$RAW_BACKUP_DIR/$app/$app.apk" || true
    $ADB shell am force-stop "$app"
    user="$($ADB shell stat -c '%U:%G' "/data/data/$app")"
    rsync_start
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --chown="$user" --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "$RAW_BACKUP_DIR/$app/data/" "${RSYNC_BASE_PATH}/data/data/$app/"
    $ADB shell restorecon -R "/data/data/$app"
    pa_restore "$app"
}

raw_restore_spefial_bluetooth() {
    raw_restore_spefial_file /data/misc/bluedroid/bt_config.conf
    $ADB shell killall com.android.bluetooth
}

raw_restore_spefial_calllog() {
    raw_restore_spefial_file /data/user/0/com.android.providers.contacts/databases/calllog.db
    $ADB shell killall android.process.acore
}

raw_restore_spefial_file() {
    local file user
    file="$1"
    test -z "$file" && usage
    user="$($ADB shell stat -c '%U:%G' "$file")"
    if [ -n "$user" ] && [ -f "${SPEFIAL_BACKUP_DIR}${file}" ]
    then
        rsync_start
        RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync "${SPEFIAL_BACKUP_DIR}${file}" "${RSYNC_BASE_PATH}${file}"
        $ADB shell chown "$user" "$file"
        $ADB shell restorecon "$file"
    fi
}

raw_restore_spefial_wifi() {
    local file settings networks
    file="$SPEFIAL_BACKUP_DIR/data/misc/wifi/wpa_supplicant.conf"
    if [ -f "$file" ]
    then
        settings="$(adb shell cat /data/misc/wifi/wpa_supplicant.conf | awk '/^network={/ {flag=1} {if(!flag) print}')"
        networks="$(awk '/^network={/ {flag=1} flag' "$file")"
        $ADB shell 'cat >/data/misc/wifi/wpa_supplicant.conf' <<EOF
${settings}

${networks}
EOF
        $ADB shell killall /system/bin/wpa_supplicant
    fi
}

rsync_password() {
    if [ -z "$RSYNC_PASSWORD" ]
    then
        RSYNC_PASSWORD="$($ADB shell cat /mnt/secure/rsyncd.secrets)"
        RSYNC_PASSWORD="${RSYNC_PASSWORD#*:}"
    fi
}

rsync_start() {
    local password
    if [ -n "$RSYNC_START_FLAG" ]
    then
        return
    fi
    RSYNC_START_FLAG=1
    adb_root
    if ! adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'cat >/mnt/secure/rsyncd.conf' <<EOF
address = 127.0.0.1
gid = root
pid file = /mnt/secure/rsyncd.pid
read only = false
uid = root
use chroot = false
[data]
  auth users = backup
  hosts allow = 127.0.0.1
  path = /data
  secrets file = /mnt/secure/rsyncd.secrets
EOF
        password="$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c 16)"
        $ADB shell 'cat >/mnt/secure/rsyncd.secrets' <<EOF
backup:${password}
EOF
        $ADB shell chmod 600 /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets
        $ADB shell -t rsync --daemon --config=/mnt/secure/rsyncd.conf
    fi
    rsync_password
    adb forward "tcp:$RSYNC_LOCAL_PORT" tcp:873
}

rsync_stop() {
    if adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'kill $(cat /mnt/secure/rsyncd.pid)'
    fi
    $ADB shell rm /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets || true
    $ADB forward --remove "tcp:$RSYNC_LOCAL_PORT" || true
    adb_unroot
    RSYNC_START_FLAG=''
}

if type "$action" 2>/dev/null | grep -qF "function"
then
    shift
    $action "$@"
else
    usage
fi
