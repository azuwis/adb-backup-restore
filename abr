#!/bin/bash

set -e

ADB='adb -d'
RSYNC_LOCAL_PORT='1873'
RSYNC_BASE_PATH="rsync://backup@127.0.0.1:${RSYNC_LOCAL_PORT}"

usage() {
    cat <<EOF
USAGE: $(basename "$0") [-hf] subcommand [options ...]
OPTIONS:
  -h        | help
SUBCOMMANDS:
  b|backup [<app...>]      | create adb backup
  d|diff <backup>          | diff apps from installed to backup
  l|list <backup>          | list apps in adb backup
  i|installed [-3] [-f]    | list installed apps
  p|pack <app>             | pack app into adb backup
  r|restore <backup> <app> | restore app in adb backup
  rb|raw_backup <app>        | backup app using su
  rr|raw_restore <app>       | restore app using su
  p|unpack <backup> <app>  | unpack app in adb backup
EOF
    exit 1
}

backup() {
    if [ -n "$1" ]
    then
        app=$*
        backup="${app// /_}.ab"
    else
        app="-all"
        backup="$(date +%Y-%m-%d).ab"
    fi
    $ADB backup -f "$backup" -apk $app
}

diff() {
    backup="$1"
    test -z "$backup" && usage
    command diff -u <(installed | sort) <(list "$backup" | sort)
}

list() {
    backup="$1"
    test -z "$backup" && usage
    backup_list="list/$backup.list"
    mkdir -p list
    if [ "$backup" -nt "$backup_list" ]
    then
        tail -n +5 "$backup" \
            | zlib-flate -uncompress \
            | tar -tf - \
            | awk -F/ '{print $2}' \
            | uniq \
            | tee "$backup_list"
    else
        cat "$backup_list"
    fi
}

installed() {
    if $ADB shell cmd | grep -q 'cmd: not found'; then
        $ADB shell pm list packages "$@" | sed 's/^package://'
    else
        $ADB shell cmd package list packages "$@" | sed 's/^package://'
    fi
}

pack() {
    mkdir -p pack
    app="$1"
    test -z "$app" && usage
    app="${app/#apps\//}"
    (echo -ne 'ANDROID BACKUP\n1\n1\nnone\n' && tar --format=ustar -cf - -T "apps/$app.list" | zlib-flate -compress) >"pack/$app.ab"
}

restore() {
    backup="$1"
    app="$2"
    test -z "$backup" && usage
    test -z "$app" && usage
    unpack "$backup" "$app"
    pack "$app"
    $ADB install "apps/$app/a/base.apk" || true
    $ADB restore "pack/$app.ab"
}

adb_root() {
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" != 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB root
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 1 && start adbd"'
        fi
        $ADB wait-for-device
    fi
}

adb_unroot() {
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" = 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB unroot
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 0 && start adbd"'
        fi
        $ADB wait-for-device
    fi
}

start_rsync() {
    adb_root
    if ! adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'cat >/mnt/secure/rsyncd.conf' <<EOF
address = 127.0.0.1
gid = root
pid file = /mnt/secure/rsyncd.pid
read only = false
uid = root
use chroot = false
[data]
  auth users = backup
  hosts allow = 127.0.0.1
  path = /data
  secrets file = /mnt/secure/rsyncd.secrets
EOF
        password="$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c 16)"
        $ADB shell 'cat >/mnt/secure/rsyncd.secrets' <<EOF
backup:${password}
EOF
        $ADB shell chmod 600 /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets
        $ADB shell -t rsync --daemon --config=/mnt/secure/rsyncd.conf
        adb forward "tcp:$RSYNC_LOCAL_PORT" tcp:873
    fi
}

stop_rsync() {
    if adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'kill $(cat /mnt/secure/rsyncd.pid)'
        $ADB shell rm /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets
        $ADB forward --remove "tcp:$RSYNC_LOCAL_PORT"
    fi
    adb_unroot
}

raw_backup() {
    app="$1"
    test -z "$app" && usage
    start_rsync
    $ADB shell am force-stop "$app"
    mkdir -p "raw_backup/$app"
    apk="$($ADB shell pm path "$app")"
    apk="${apk:8}"
    password="$($ADB shell cat /mnt/secure/rsyncd.secrets)"
    password="${password:7}"
    RSYNC_PASSWORD="$password" rsync "${RSYNC_BASE_PATH}${apk}" "raw_backup/$app/$app.apk"
    RSYNC_PASSWORD="$password" rsync -a --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "${RSYNC_BASE_PATH}/data/data/$app/" "raw_backup/$app/data/"
}

raw_restore() {
    app="$1"
    test -z "$app" && usage
    start_rsync
    $ADB install "raw_backup/$app/$app.apk" || true
    $ADB shell am force-stop "$app"
    user="$($ADB shell stat -c '%U:%G' "/data/data/$app")"
    password="$($ADB shell cat /mnt/secure/rsyncd.secrets)"
    password="${password:7}"
    RSYNC_PASSWORD="$password" rsync -a --chown="$user" --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "raw_backup/$app/data/" "${RSYNC_BASE_PATH}/data/data/$app/"
    $ADB shell restorecon -R "/data/data/$app"
}

unpack() {
    backup="$1"
    app="$2"
    test -z "$backup" && usage
    app_list="apps/$app.list"
    mkdir -p apps
    tail -n +5 "$backup" | zlib-flate -uncompress | tar -xvf - "apps/$app" > "$app_list"
}

action="$1"
case "$action" in
    b) action=backup ;;
    d) action=diff ;;
    i) action=installed ;;
    l) action=list ;;
    p) action=pack ;;
    r) action=restore ;;
    rb) action=raw_backup ;;
    rr) action=raw_restore ;;
    u) action=unpack ;;
esac

if type "$action" 2>/dev/null | grep -qF "function"
then
    shift
    $action "$@"
else
    usage
fi
