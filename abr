#!/bin/bash

# apt-get install adb curl qpdf rsync sqlite3

set -e

ADB='adb -d'
ASN="$ADB shell -n"
ADB_BACKUP_DIR='adb_backup'
RAW_BACKUP_DIR='raw_backup'
SPEFIAL_BACKUP_DIR="$RAW_BACKUP_DIR/spefial"
RSYNC_LOCAL_PORT='1873'
RSYNC_BASE_PATH="rsync://backup@127.0.0.1:${RSYNC_LOCAL_PORT}"
RSYNC_PASSWORD=''
ADB_ROOT_FLAG=''
RSYNC_START_FLAG=''
APP_UID_ALL=''

usage() {
    cat <<EOF >&2
USAGE: $(basename "$0") [-hx] subcommand [options ...]
OPTIONS:
  -h                               | help
  -x                               | debug
SUBCOMMANDS:
ac  | account <name> <type>        | list account type name and type
acb | account_backup <app>         | backup account of app
acba| account_backup_all           | backup all accounts
acr | account_restore <app>        | restore account of app
aa  | account_app                  | list app for account auth type
aab | account_app_backup           | backup app for account auth type
ade | adblock_enable               | enable adblock
add | adblock_disable              | disable adblock
ab  | adb_backup [<app...>]        | create adb backup
alb | adb_list_backup <backup>     | list apps in adb backup
ali | adb_list_installed [-3] [-f] | list installed apps
aln | adb_list_nobackup <backup>   | list apps without ALLOW_BACKUP flag
ap  | adb_pack <app>               | pack app into adb backup
ar  | adb_restore <backup> <app>   | restore app in adb backup
aro | adb_root                     | adb root
au  | adb_unpack <backup> <app>    | unpack app in adb backup
aur | adb_unroot                   | adb unroot
aua | app_uid_all                  | list all app uid
auab| app_uid_all_backup           | backup all app uid
ao  | appops <app>                 | list appops
aob | appops_backup <app>          | backup appops
aoba| appops_backup_all            | backup appops of all apps
aor | appops_restore <app>         | restore appops
aora| appops_restore_all           | restore appops of all apps
aosi| appops_set_ignore <app>      | set all appops to ignore
cp  | captive_portal               | tweak captive portal
dw  | doze_whitelist               | list apps whitelisted in doze
dwb | doze_whitelist_backup        | backup apps whitelisted in doze
dwr | doze_whitelist_restore       | restore apps whitelisted in doze
da  | disabled_app                 | list disabled apps
dab | disabled_app_backup          | backup list of disabled apps
dar | disabled_app_restore         | backup list of disabled apps
nr  | netpolicy_restrict           | list netpolicy restrict background
nrb | netpolicy_restrict_backup    | backup netpolicy restrict background
nrr | netpolicy_restrict_restore   | restore netpolicy restrict background
pab | pa_backup <app>              | backup permission and appops
paba| pa_backup_all                | backup permission and appops of all apps
par | pa_restore <app>             | restore permission and appops
para| pa_restore_all               | restore permission and appops of all apps
p   | permission <app>             | list permission
pb  | permission_backup <app>      | backup permission
pba | permission_backup_all        | backup permission of all apps
pr  | permission_restore <app>     | restore permission
pra | permission_restore_all       | restore permission of all apps
rb  | raw_backup <app>             | backup app by raw files
rba | raw_backup_all               | backup all apps by raw files
rbs | raw_backup_spefial           | backup spefial files
rr  | raw_restore <app>            | restore app by raw files
rra | raw_restore_all <file>       | restore all app listed in file
rrs | raw_restore_spefial          | restore all spefial backups
rrsa| raw_restore_spefial_accounts | restore accounts
rrsb| raw_restore_spefial_bluetooth| restore bluetooth settings
rrsc| raw_restore_spefial_calllog  | restore calllog
rrss| raw_restore_spefial_sms      | restore sms
rrsw| raw_restore_spefial_wifi     | restore wifi settings
rss | rsync_start                  | start rsync
rsst| rsync_stop                   | stop rsync
sb  | settings_backup              | backup settings
sr  | settings_restore             | restore settings
EOF
    exit 1
}

subcommand() {
    local command full_command
    command="$1"
    full_command="$(usage 2>&1 | awk -F'[ |]+' '/^SUBCOMMANDS:/ {flag=1;next} {if(flag && $1=="'"$command"'") {print $2}}')"
    if [ -n "$full_command" ]
    then
        echo "$full_command"
    else
        echo "$command"
    fi
}

action="$1"
if [ "$action" = '-x' ]
then
    set -x
    shift
    action="$1"
fi
action="$(subcommand "$action")"

account() {
    local name type id token_type uid app
    name="$1"
    type="$2"
    adb_root
    id="$($ASN "sqlite3 /data/system_ce/0/accounts_ce.db 'select _id from accounts where name=\"$name\" and type=\"$type\";'")"
    app_uid_all_global
    echo "$name"
    echo "$type"
    echo 'BEGIN_INIT'
    $ADB shell sqlite3 /data/system_ce/0/accounts_ce.db <<EOF
.mode insert accounts
select NULL,name,type,password from accounts where _id='$id';
EOF
    echo 'END_INIT'
    echo 'BEGIN_CE'
    $ADB shell sqlite3 /data/system_ce/0/accounts_ce.db <<EOF
.mode insert authtokens
select NULL,'ACCOUNTS_ID',type,authtoken from authtokens where accounts_id='$id';
.mode insert extras
select NULL,'ACCOUNTS_ID',key,value from extras where accounts_id='$id';
EOF
    echo 'END_CE'
    echo 'BEGIN_DE'
    $ADB shell sqlite3 /data/system_de/0/accounts_de.db <<EOF
.mode insert accounts
select 'ACCOUNTS_ID',name,type,previous_name,last_password_entry_time_millis_epoch from accounts where _id='$id';
EOF
    echo 'END_DE'
    echo 'BEGIN_GRANTS'
    {
        $ADB shell sqlite3 /data/system_de/0/accounts_de.db <<EOF
select auth_token_type,uid from grants where accounts_id='$id';
EOF
    } | while IFS='|' read -r token_type uid
do
    app="$(csv_get "$APP_UID_ALL" "$uid")"
    echo "${token_type}|${app}"
done
    echo 'END_GRANTS'
}

account_backup() {
    local app uid name type
    app="$1"
    test -z "$app" && usage
    adb_root
    uid="$(app_uid "$app")"
    if [ -n "$uid" ]
    then
        $ASN "sqlite3 /data/system_de/0/accounts_de.db 'select key from meta where value=\"$uid\";'" | while read -r type
        do
            type="${type#*:}"
            $ASN "sqlite3 /data/system_ce/0/accounts_ce.db 'select name from accounts where type=\"$type\";'" | while read -r name
            do
                general_backup "$RAW_BACKUP_DIR/$app/account/${name}_${type}" "$name" "$type"
            done
        done
    fi
}

account_backup_all() {
    local uid app
    app_uid_all_global
    $ASN "sqlite3 /data/system_de/0/accounts_de.db 'select distinct value from meta;'" | while read -r uid
    do
        app="$(csv_get "$APP_UID_ALL" "$uid")"
        if [ -n "$app" ]
        then
            account_backup "$app"
        fi
    done
}

account_grants() {
    local id token_type uid app
    app_uid_all_global
    {
        $ASN "sqlite3 /data/system_de/0/accounts_de.db 'select accounts_id,auth_token_type,uid from grants;'"
    } | while IFS='|' read -r id token_type uid
    do
        app="$(csv_get "$APP_UID_ALL" "$uid")"
        echo "${id}|${token_type}|${app}"
    done
}

account_grants_restore() {
    local id grant_type grant_app grant_uid
    adb_root
    $ASN "sqlite3 /data/system_de/0/accounts_de.db 'delete from grants;'"
    cat_file "$SPEFIAL_BACKUP_DIR/account_grants" | while IFS='|' read -r id grant_type grant_app
    do
        grant_uid="$(app_uid "$grant_app")"
        if [ -n "$grant_uid" ]
        then
            echo "INSERT INTO grants VALUES('$id', '$grant_type', '$grant_uid');"
        fi
    done  | $ADB shell sqlite3 /data/system_de/0/accounts_de.db
}

account_grants_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/account_grants"
}

account_restore() {
    local app account id name type grant_type grant_app grant_uid
    app="$1"
    test -z "$app" && usage
    for account in "$RAW_BACKUP_DIR/$app/account/"*
    do
        if [ -e "$account" ]
        then
            { read -r name; read -r type; } <"$account"
            adb_root
            id="$($ASN "sqlite3 /data/system_ce/0/accounts_ce.db 'select _id from accounts where name=\"$name\" and type=\"$type\";'")"
            if [ -z "$id" ]
            then
                echoerr "restore $name/$type"
                awk '/^BEGIN_INIT$/{flag=1;next} /^END_INIT$/{flag=0} flag' "$account" | $ADB shell sqlite3 /data/system_ce/0/accounts_ce.db
                id="$($ASN "sqlite3 /data/system_ce/0/accounts_ce.db 'select _id from accounts where name=\"$name\" and type=\"$type\";'")"
                awk '/^BEGIN_CE$/{flag=1;next} /^END_CE$/{flag=0} flag' "$account" | sed "s/ACCOUNTS_ID/$id/" | $ADB shell sqlite3 /data/system_ce/0/accounts_ce.db
                awk '/^BEGIN_DE$/{flag=1;next} /^END_DE$/{flag=0} flag' "$account" | sed "s/ACCOUNTS_ID/$id/" | $ADB shell sqlite3 /data/system_de/0/accounts_de.db
                awk '/^BEGIN_GRANTS$/{flag=1;next} /^END_GRANTS$/{flag=0} flag' "$account" | while IFS='|' read -r grant_type grant_app
                do
                    grant_uid="$(app_uid "$grant_app")"
                    if [ -n "$grant_uid" ]
                    then
                        echo "INSERT INTO grants VALUES('$id', '$grant_type', '$grant_uid');"
                    fi
                done  | $ADB shell sqlite3 /data/system_de/0/accounts_de.db
            else
                echoerr "skip $name/$type, already exist"
            fi
        fi
    done
}

account_app() {
    local type uid app
    adb_root
    $ASN 'sqlite3 /data/system_de/0/accounts_de.db "select * from meta"' | while IFS='|' read -r type uid
    do
        app_uid_all_global
        app="$(csv_get "$APP_UID_ALL" "$uid")"
        if [ -n "$app" ]
        then
            echo "$type $app"
        fi
    done
}

account_app_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/account_app"
}

adblock_enable() {
    local host_block
    host_block="$(adblock_host_block)"
    adb_root
    $ASN mount -o remount,rw /system
    echoerr "block $(wc -l <<<"$host_block") hosts"
    $ADB shell 'cat >/system/etc/hosts' <<EOF
$(adblock_host_default)

${host_block}
EOF
    $ASN mount -o remount,ro /system
    adblock_flush_dns
}

adblock_disable() {
    adb_root
    $ASN mount -o remount,rw /system
    echoerr 'restore /system/etc/hosts'
    $ADB shell 'cat >/system/etc/hosts' <<EOF
$(adblock_host_default)
EOF
    $ASN mount -o remount,ro /system
    adblock_flush_dns
}

adblock_flush_dns() {
    echoerr 'flush dns'
    local i
    for i in 1 2
    do
        $ASN setprop "net.dns$i" "$($ASN getprop "net.dns$i")"
    done
}

adblock_host_block() {
    (
    curl -fsSL 'https://adaway.org/hosts.txt' | awk '/^127\.0\.0\.1[ \t]+[A-Za-z0-9_-.]+\.[A-Za-z]+$/ {print "127.0.0.1",tolower($2)}'
    curl -fsSL 'https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt' | awk '/^[A-Za-z0-9_-.]+\.[A-Za-z]+$/ {print "127.0.0.1",tolower($1)}'
    curl -fsSL 'https://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&showintro=0&mimetype=plaintext' | awk '/^[A-Za-z0-9_-.]+\.[A-Za-z]+$/ {print "127.0.0.1",tolower($1)}'
    ) | sort | uniq
}

adblock_host_default() {
    cat <<EOF
127.0.0.1       localhost
::1             ip6-localhost
EOF
}

adb_backup() {
    local app backup
    mkdir -p "$ADB_BACKUP_DIR"
    if [ -n "$1" ]
    then
        app=$*
        backup="${ADB_BACKUP_DIR}/${app// /_}.ab"
    else
        app="-all"
        backup="${ADB_BACKUP_DIR}/$(date +%Y-%m-%d).ab"
    fi
    $ADB backup -f "$backup" -apk -nosystem $app
    for app in $(adb_list_backup "$backup")
    do
        pa_backup "$app"
    done
}

adb_killall() {
    local process
    process="$1"
    test -z "$process" && usage
    adb_root
    echoerr "killall $process"
    $ASN killall "$process" || true
}

adb_list_backup() {
    local backup tmp_dir backup_list
    backup="$1"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    backup_list="$tmp_dir/$(basename "$backup").list"
    if [ "$backup" -nt "$backup_list" ]
    then
        tail -n +5 "$backup" \
            | zlib-flate -uncompress \
            | tar -tf - \
            | awk -F/ '{print $2}' \
            | uniq \
            | tee "$backup_list"
    else
        cat "$backup_list"
    fi
}

adb_list_installed() {
    if $ASN which cmd >/dev/null; then
        $ASN cmd package list packages "$@" | sed 's/^package://'
    else
        $ASN pm list packages "$@" | sed 's/^package://'
    fi
}

adb_list_nobackup() {
    local backup
    backup="$1"
    test -z "$backup" && usage
    adb_list_installed -3 | grep -vFxf <(adb_list_backup "$backup") | sort
}

adb_pack() {
    local dir app tmp_dir
    dir="$1"
    test -d "$dir" || usage
    app="$(basename "$dir")"
    tmp_dir="$(dirname "$dir")"
    tmp_dir="$(dirname "$tmp_dir")"
    (echo -ne 'ANDROID BACKUP\n1\n1\nnone\n' && tar -C "$tmp_dir" --format=ustar -cf - -T "${tmp_dir}/$app.list" | zlib-flate -compress) >"${tmp_dir}/$app.ab"
}

adb_restore() {
    local backup app tmp_dir
    backup="$1"
    app="$2"
    test -f "$backup" || usage
    test -z "$app" && usage
    adb_unpack "$backup" "$app"
    tmp_dir="$(dirname "$backup")/tmp"
    adb_pack "${tmp_dir}/apps/${app}"
    $ADB install "${tmp_dir}/apps/${app}/a/base.apk" || true
    $ADB restore "${tmp_dir}/${app}.ab"
    pa_restore "$app"
}

adb_root() {
    if [ -n "$ADB_ROOT_FLAG" ]
    then
        return
    fi
    $ADB wait-for-device
    if [ "$($ASN whoami)" != 'root' ]
    then
        echoerr 'get root access'
        $ADB root
        $ADB wait-for-device
        if [ "$($ASN whoami)" != 'root' ]
        then
            $ASN 'su -c "stop adbd && setprop service.adb.root 1 && start adbd"' || true
            $ADB wait-for-device
            if [ "$($ASN whoami)" != 'root' ]
            then
                echoerr 'can not get root access.'
                exit 1
            fi
        fi
    fi
    ADB_ROOT_FLAG=1
}

adb_unpack() {
    local backup app tmp_dir app_list
    backup="$1"
    app="$2"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    app_list="$tmp_dir/$app.list"
    tail -n +5 "$backup" | zlib-flate -uncompress | tar -C "$tmp_dir" -xvf - "apps/$app" > "$app_list"
}

adb_unroot() {
    $ADB wait-for-device
    if [ "$($ASN whoami)" = 'root' ]
    then
        echoerr 'drop root access'
        $ADB unroot
        $ADB wait-for-device
        if [ "$($ASN whoami)" = 'root' ]
        then
            $ASN 'su -c "stop adbd && setprop service.adb.root 0 && start adbd"'
            $ADB wait-for-device
            if [ "$($ASN whoami)" = 'root' ]
            then
                echoerr 'can not drop root access.'
                exit 1
            fi
        fi
    fi
    ADB_ROOT_FLAG=''
}

app_uid() {
    local app
    app="$1"
    test -z "$app" && usage
    adb_root
    $ASN stat -c %u "/data/data/$app" 2>/dev/null
}

app_uid_all() {
    adb_root
    $ASN ls -ln /data/data | awk '{print $3,$8}' | sort -n
}

app_uid_all_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/app_uid_all"
}

app_uid_all_global() {
    if [ -z "$APP_UID_ALL" ]
    then
        APP_UID_ALL="$(app_uid_all)"
    fi
}

appops() {
    local app
    app="$1"
    test -z "$app" && usage
    $ASN cmd appops get "$app" | awk -F ' +|:|;' '{ if($3=="ignore" || $3=="allow") {print $1,$3} }' | grep -Ev '^(MONITOR_LOCATION|MONITOR_HIGH_POWER_LOCATION|NEIGHBORING_CELLS|READ_CALENDAR) ' || true
}

appops_backup() {
    general_backup "$RAW_BACKUP_DIR/$1/appops" "$@"
}

appops_backup_all() {
    foreach_3rd_party_app appops_backup
}

appops_restore() {
    app="$1"
    test -z "$app" && usage
    changed_backup "$RAW_BACKUP_DIR/$app/appops" "$app" | while read -r op mode
    do
        $ASN cmd appops set "$app" "$op" "$mode"
    done
}

appops_restore_all() {
    foreach_3rd_party_app appops_restore
}

appops_set_ignore () {
    local app op
    app="$1"
    test -z "$app" && usage
    for op in $($ASN cmd appops get "$app" | awk -F: '{print $1}' | grep -Fv READ_CALENDAR || true)
    do
        $ASN cmd appops set "$app" "$op" ignore
    done
}

captive_portal() {
    local host='google.cn'
    echoerr "use $host"
    $ASN settings put global captive_portal_server "$host"
    $ASN settings put global captive_portal_http_url "http://${host}/generate_204"
    $ASN settings put global captive_portal_https_url "https://${host}/generate_204"
}

cat_file() {
    local file
    for file in "$@"
    do
        if [ -e "$file" ]
        then
            cat "$file"
        fi
    done
}

changed_backup() {
    local file caller func output
    file="$1"
    shift
    caller="${FUNCNAME[1]}"
    func=${caller%_restore}
    if [ "$caller" = "$func" ]
    then
        return
    fi
    output="$(cat_file "$file" | grep -vFxf <("$func" "$@"))"
    echoerr "${1}\n${output}\n"
    echo "$output"
}

csv_get() {
    local csv key k v
    csv="$1"
    key="$2"
    while read -r k v
    do
        if [ "$k" == "$key" ]
        then
            echo "$v"
            return
        fi
    done <<<"$csv"
}

disabled_app() {
    adb_list_installed -d
}

disabled_app_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/disabled_app"
}

disabled_app_restore() {
    changed_backup "$SPEFIAL_BACKUP_DIR/disabled_app" | while read -r app
    do
        $ASN pm disable "$app"
    done
}

doze_whitelist() {
    $ASN dumpsys deviceidle whitelist | awk -F, '{if ($1=="user") print $2}'
}

doze_whitelist_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/doze_whitelist"
}

doze_whitelist_restore() {
    changed_backup "$SPEFIAL_BACKUP_DIR/doze_whitelist" | while read -r app
    do
        $ASN dumpsys deviceidle whitelist "+${app}"
    done
}

echoerr() {
    local caller
    caller="${FUNCNAME[1]}"
    case "$caller" in
        adb_killall|adblock_flush_dns|changed_backup|general_backup|raw_restore_spefial_file)
            caller="${FUNCNAME[2]}"
            ;;
    esac
    >&2 echo -e "$caller: $*"
}

foreach_3rd_party_app() {
    local app action
    for app in $(adb_list_installed -3)
    do
        for action in "$@"
        do
            "$action" "$app"
        done
    done
}

general_backup() {
    local file caller func output
    file="$1"
    shift
    caller="${FUNCNAME[1]}"
    func=${caller%_backup}
    if [ "$caller" = "$func" ]
    then
        return
    fi
    output="$("$func" "$@")"
    if [ -n "$output" ]
    then
        echoerr "$file"
        mkdir -p "$(dirname "$file")"
        echo "$output" >"$file"
    fi
}

netpolicy_restrict() {
    local list uid app
    list="$($ASN cmd netpolicy list restrict-background-blacklist)"
    list="${list#*:}"
    for uid in $list
    do
        app_uid_all_global
        app="$(csv_get "$APP_UID_ALL" "$uid")"
        if [ -n "$app" ]
        then
            echo "$app"
        fi
    done
}

netpolicy_restrict_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/netpolicy_restrict"
}

netpolicy_restrict_restore() {
    local app
    changed_backup "$SPEFIAL_BACKUP_DIR/netpolicy_restrict" | while read -r app
    do
        uid="$(app_uid "$app")"
        if [ -n "$uid" ]
        then
            $ASN cmd netpolicy add restrict-background-blacklist "$uid"
        fi
    done
}

pa() {
    local app
    app="$1"
    test -z "$app" && usage
    permission "$app"
    echo
    appops "$app"
}

pa_backup() {
    local app
    app="$1"
    test -z "$app" && usage
    permission_backup "$app"
    appops_backup "$app"
}

pa_backup_all() {
    permission_backup_all
    appops_backup_all
}

pa_restore() {
    local app
    app="$1"
    test -z "$app" && usage
    permission_restore "$app"
    appops_restore "$app"
}

pa_restore_all() {
    foreach_3rd_party_app pa_restore
}

permission() {
    local app
    app="$1"
    test -z "$app" && usage
    $ASN dumpsys package "$app" | awk -F' +|:|,' '/runtime permissions:$/{flag=1;next}/(:$|^$)/{flag=0} {if(flag) {if($4=="granted=true") {print $2, "grant"} else if($4=="granted=false") {print $2, "revoke"}}}'
}

permission_backup() {
    local app permission permission_file revoke
    app="$1"
    test -z "$app" && usage
    permission="$(permission "$app")"
    permission_file="$RAW_BACKUP_DIR/$app/permission"
    permission_revoke_file="${permission_file}.revoke"
    if [ -n "$permission" ]
    then
        if [ -e "$permission_file" ]
        then
            revoke="$(grep -vFxf <(echo "$permission") "$permission_file" | awk '{if($2=="grant") {print $1, "revoke"}}')"
            if [ -e "$permission_revoke_file" ]
            then
                revoke="$(echo "$revoke" | grep -vFxf "${permission_file}.revoke")"
            fi
            if [ -n "$revoke" ]
            then
                echoerr "$permission_revoke_file"
                echo "$revoke"  >> "$permission_revoke_file"
            fi
        fi
        echoerr "$permission_file"
        echo "$permission" >"$permission_file"
    fi
}

permission_backup_all() {
    foreach_3rd_party_app permission_backup
}

permission_restore() {
    local app perm mode
    app="$1"
    test -z "$app" && usage
    changed_backup <(cat_file "$RAW_BACKUP_DIR/$app/permission" "$RAW_BACKUP_DIR/$app/permission.revoke" | sort | uniq) "$app" | while read -r perm mode
    do
        $ASN pm "$mode" "$app" "$perm"
    done
}

permission_restore_all() {
    foreach_3rd_party_app permission_restore
}

raw_backup() {
    local app apk
    app="$1"
    test -z "$app" && usage
    $ASN am force-stop "$app"
    mkdir -p "$RAW_BACKUP_DIR/$app"
    apk="$($ASN pm path "$app")"
    apk="${apk:8}"
    rsync_start
    if [ "${apk:0:6}" == '/data/' ]
    then
        echoerr "$RAW_BACKUP_DIR/$app/$app.apk"
        RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync "${RSYNC_BASE_PATH}${apk}" "$RAW_BACKUP_DIR/$app/$app.apk"
    fi
    echoerr "$RAW_BACKUP_DIR/$app/data/"
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "${RSYNC_BASE_PATH}/data/data/$app/" "$RAW_BACKUP_DIR/$app/data/"
    pa_backup "$app"
    account_backup "$app"
    >&2 echo
}

raw_backup_all() {
    raw_backup_spefial
    foreach_3rd_party_app raw_backup
}

raw_backup_spefial() {
    mkdir -p "$SPEFIAL_BACKUP_DIR/data"
    rsync_start
    echoerr
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -ai --ignore-missing-args --files-from=- "${RSYNC_BASE_PATH}/data/" "$SPEFIAL_BACKUP_DIR/data/" <<EOF
/media/0/WhatsApp/Databases/msgstore.db.crypt12
/misc/bluedroid/bt_config.conf
/misc/wifi/wpa_supplicant.conf
/system/appops.xml
/system/netpolicy.xml
/system/users/0/appwidgets.xml
/system/users/0/settings_global.xml
/system/users/0/settings_secure.xml
/system/users/0/settings_system.xml
/system/users/0/wallpaper
/system/users/0/wallpaper_info.xml
/system_ce/0/accounts_ce.db
/system_de/0/accounts_de.db
/user/0/com.android.providers.contacts/databases/calllog.db
/user/0/com.android.providers.contacts/databases/contacts2.db
/user_de/0/com.android.providers.telephony/databases/mmssms.db
/user_de/0/com.android.providers.telephony/databases/telephony.db
EOF
    >&2 echo
    account_app_backup
    account_backup com.google.android.backuptransport
    account_grants_backup
    app_uid_all_backup
    disabled_app_backup
    doze_whitelist_backup
    netpolicy_restrict_backup
    settings_backup
    >&2 echo
}

raw_restore() {
    local app apk user
    app="$1"
    test -z "$app" && usage
    apk="$RAW_BACKUP_DIR/$app/$app.apk"
    if [ -f "$apk" ]
    then
        echoerr "$apk"
        $ADB install "$apk" || true
    fi
    $ASN am force-stop "$app"
    user="$($ASN stat -c '%U:%G' "/data/data/$app")"
    rsync_start
    echoerr "$RAW_BACKUP_DIR/$app/data/"
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --chown="$user" --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "$RAW_BACKUP_DIR/$app/data/" "${RSYNC_BASE_PATH}/data/data/$app/"
    $ASN restorecon -R "/data/data/$app"
    pa_restore "$app"
}

raw_restore_all() {
    local file app
    file="$1"
    while read -r app
    do
        raw_restore "$app"
    done <"$file"
    raw_restore_spefial
}

raw_restore_spefial() {
    adblock_enable
    captive_portal
    disabled_app_restore
    doze_whitelist_restore
    netpolicy_restrict_restore
    settings_restore

    raw_restore_spefial_bluetooth
    raw_restore_spefial_calllog
    raw_restore_spefial_sms
    raw_restore_spefial_wifi

    raw_restore_spefial_accounts
}

raw_restore_spefial_accounts() {
    adb_root
    echoerr 'restore all accounts'
    raw_restore_spefial_database /data/system_ce/0/accounts_ce.db accounts authtokens extras
    raw_restore_spefial_database /data/system_de/0/accounts_de.db accounts
    account_grants_restore
    echoerr 'restart'
    $ASN restart
}

raw_restore_spefial_bluetooth() {
    raw_restore_spefial_file /data/misc/bluedroid/bt_config.conf
    adb_killall com.android.bluetooth
}

raw_restore_spefial_calllog() {
    raw_restore_spefial_file /data/user/0/com.android.providers.contacts/databases/calllog.db
    adb_killall android.process.acore
}

raw_restore_spefial_database() {
    local file table
    file="$1"
    shift
    if [ -e "${SPEFIAL_BACKUP_DIR}${file}" ] && $ASN test -e "$file"
    then
        for table in "$@"
        do
            $ASN "sqlite3 '$file' 'delete from $table;'"
            sqlite3 "${SPEFIAL_BACKUP_DIR}${file}" ".dump '$table'" | grep '^INSERT ' | $ADB shell sqlite3 "$file"
        done
    fi
}

raw_restore_spefial_file() {
    local file user
    file="$1"
    test -z "$file" && usage
    adb_root
    user="$($ASN stat -c '%U:%G' "$file")"
    if [ -n "$user" ] && [ -f "${SPEFIAL_BACKUP_DIR}${file}" ]
    then
        rsync_start
        echoerr "$file $user"
        RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync "${SPEFIAL_BACKUP_DIR}${file}" "${RSYNC_BASE_PATH}${file}"
        $ASN chown "$user" "$file"
        $ASN restorecon "$file"
    fi
}

raw_restore_spefial_sms() {
    raw_restore_spefial_file /data/user_de/0/com.android.providers.telephony/databases/mmssms.db
    # raw_restore_spefial_file /data/user_de/0/com.android.providers.telephony/databases/telephony.db
    adb_killall com.android.phone
    adb_killall com.android.messaging
}

raw_restore_spefial_wifi() {
    local file settings networks
    file="$SPEFIAL_BACKUP_DIR/data/misc/wifi/wpa_supplicant.conf"
    if [ -f "$file" ]
    then
        adb_root
        settings="$(adb shell cat /data/misc/wifi/wpa_supplicant.conf | awk '/^network={/ {flag=1} {if(!flag) print}')"
        networks="$(awk '/^network={/ {flag=1} flag' "$file")"
        echoerr '/data/misc/wifi/wpa_supplicant.conf'
        $ADB shell 'cat >/data/misc/wifi/wpa_supplicant.conf' <<EOF
${settings}

${networks}
EOF
        adb_killall /system/bin/wpa_supplicant
    fi
}

rsync_password() {
    if [ -z "$RSYNC_PASSWORD" ]
    then
        adb_root
        RSYNC_PASSWORD="$($ASN cat /mnt/secure/rsyncd.secrets)"
        RSYNC_PASSWORD="${RSYNC_PASSWORD#*:}"
    fi
}

rsync_start() {
    local password
    if [ -n "$RSYNC_START_FLAG" ]
    then
        return
    fi
    RSYNC_START_FLAG=1
    adb_root
    if ! adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ASN "echo '
address = 127.0.0.1
gid = root
pid file = /mnt/secure/rsyncd.pid
read only = false
uid = root
use chroot = false
[data]
  auth users = backup
  hosts allow = 127.0.0.1
  path = /data
  secrets file = /mnt/secure/rsyncd.secrets
' >/mnt/secure/rsyncd.conf"
        password="$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c 16)"
        $ADB shell 'cat >/mnt/secure/rsyncd.secrets' <<EOF
backup:${password}
EOF
        $ASN chmod 600 /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets
        echoerr 'start rsync'
        $ASN -t -t rsync --daemon --no-detach --config=/mnt/secure/rsyncd.conf &
        disown
        sleep 1
    fi
    rsync_password
    adb forward "tcp:$RSYNC_LOCAL_PORT" tcp:873
}

rsync_stop() {
    if $ASN test -e /mnt/secure/rsyncd.pid
    then
        $ASN 'kill $(cat /mnt/secure/rsyncd.pid)'
        echoerr 'stop rsync'
    fi
    $ASN rm /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets || true
    $ADB forward --remove "tcp:$RSYNC_LOCAL_PORT" || true
    adb_unroot
    RSYNC_START_FLAG=''
}

settings_backup() {
    settings_global_backup
    settings_secure_backup
    settings_system_backup
}

settings_global() {
    local pattern='
ble_scan_always_enabled
mobile_data_always_on
wifi_networks_available_notification_on
wifi_scan_always_enabled
wifi_sleep_policy
'
    $ASN settings list global | grep -E "^(${pattern//$'\n'/|})="
}

settings_global_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/settings_global"
}

settings_global_restore() {
    local key value
    changed_backup "$SPEFIAL_BACKUP_DIR/settings_global" | while IFS='=' read -r key value
    do
        $ASN settings put global "$key" "$value"
    done
}

settings_secure() {
    local pattern='
android_id
display_density_forced
double_tap_to_wake
icon_blacklist
lock_to_app_exit_locked
sysui_qs_tiles
'
    $ASN settings list secure | grep -E "^(${pattern//$'\n'/|})="
}

settings_secure_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/settings_secure"
}

settings_secure_restore() {
    local key value
    changed_backup "$SPEFIAL_BACKUP_DIR/settings_secure" | while IFS='=' read -r key value
    do
        $ASN settings put secure "$key" "$value"
    done
}

settings_system() {
    local pattern='
haptic_feedback_enabled
lock_to_app_enabled
screen_brightness_mode
time_12_24
vibrate_when_ringing
'
    $ASN settings list system | grep -E "^(${pattern//$'\n'/|})="
}

settings_system_backup() {
    general_backup "$SPEFIAL_BACKUP_DIR/settings_system"
}

settings_system_restore() {
    local key value
    changed_backup "$SPEFIAL_BACKUP_DIR/settings_system" | while IFS='=' read -r key value
    do
        $ASN settings put system "$key" "$value"
    done
}

settings_restore() {
    settings_global_restore
    settings_secure_restore
    settings_system_restore
}

if type "$action" 2>/dev/null | grep -qF "function"
then
    shift
    $action "$@"
    >&2 echo
    echoerr "done"
else
    usage
fi
