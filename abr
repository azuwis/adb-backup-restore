#!/bin/bash

# apt-get install adb qpdf rsync

set -e

ADB='adb -d'
ABR_DIR="$(dirname "$(readlink -f "$0")")"
ADB_BACKUP_DIR='adb_backup'
RAW_BACKUP_DIR='raw_backup'
RSYNC_LOCAL_PORT='1873'
RSYNC_BASE_PATH="rsync://backup@127.0.0.1:${RSYNC_LOCAL_PORT}"
RSYNC_PASSWORD=''
ADB_ROOT_FLAG=''
RSYNC_START_FLAG=''

usage() {
    cat <<EOF
USAGE: $(basename "$0") [-hx] subcommand [options ...]
OPTIONS:
  -h        | help
SUBCOMMANDS:
ab  | adb_backup [<app...>]        | create adb backup
alb | adb_list_backup <backup>     | list apps in adb backup
ali | adb_list_installed [-3] [-f] | list installed apps
aln | adb_list_nobackup <backup>   | list apps without ALLOW_BACKUP flag
ap  | adb_pack <app>               | pack app into adb backup
ar  | adb_restore <backup> <app>   | restore app in adb backup
aro | adb_root                     | adb root
au  | adb_unpack <backup> <app>    | unpack app in adb backup
aur | adb_unroot                   | adb unroot
aob | appops_backup <app>          | backup appops
aoba| appops_backup_all            | backup appops of all apps
aor | appops_restore <app>         | restore appops
aora| appops_restore_all           | restore appops of all apps
aosi| appops_set_ignore <app>      | set all appops to ignore
cp  | captive_portal               | tweak captive portal
pab | pa_backup <app>              | backup permission and appops
paba| pa_backup_all                | backup permission and appops of all apps
par | pa_restore <app>             | restore permission and appops
para| pa_restore_all               | restore permission and appops of all apps
pb  | permission_backup <app>      | backup permission
pba | permission_backup_all        | backup permission of all apps
rb  | raw_backup <app>             | backup app by raw files
rba | raw_backup_all               | backup all apps by raw files
rbs | raw_backup_spefial           | backup spefial files
rr  | raw_restore <app>            | restore app by raw files
rss | rsync_start                  | start rsync
rsst| rsync_stop                   | stop rsync
EOF
    exit 1
}

action="$1"
if [ "$action" = '-x' ]
then
    set -x
    shift
    action="$1"
fi
case "$action" in
    ab)   action=adb_backup ;;
    alb)  action=adb_list_backup ;;
    ali)  action=adb_list_installed ;;
    aln)  action=adb_list_nobackup ;;
    ap)   action=adb_pack ;;
    ar)   action=adb_restore ;;
    aro)  action=adb_root ;;
    au)   action=adb_unpack ;;
    aur)  action=adb_unroot ;;
    aob)  action=appops_backup ;;
    aoba) action=appops_backup_all ;;
    aor)  action=appops_restore ;;
    aora) action=appops_restore_all ;;
    aosi) action=appops_set_ignore ;;
    cp)   action=captive_portal ;;
    pab)  action=pa_backup ;;
    paba) action=pa_backup_all ;;
    par)  action=pa_restore ;;
    para) action=pa_restore_all ;;
    pb)   action=permission_backup ;;
    pba)  action=permission_backup_all ;;
    rb)   action=raw_backup ;;
    rba)  action=raw_backup_all ;;
    rbs)  action=raw_backup_spefial ;;
    rr)   action=raw_restore ;;
    rss)  action=rsync_start ;;
    rsst) action=rsync_stop ;;
esac

adb_backup() {
    mkdir -p "$ADB_BACKUP_DIR"
    if [ -n "$1" ]
    then
        app=$*
        backup="${ADB_BACKUP_DIR}/${app// /_}.ab"
    else
        app="-all"
        backup="${ADB_BACKUP_DIR}/$(date +%Y-%m-%d).ab"
    fi
    $ADB backup -f "$backup" -apk $app
    for app in $(adb_list_backup "$backup")
    do
        permission_backup "$app"
        appops_backup "$app"
    done
}

adb_list_backup() {
    backup="$1"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    backup_list="$tmp_dir/$(basename "$backup").list"
    if [ "$backup" -nt "$backup_list" ]
    then
        tail -n +5 "$backup" \
            | zlib-flate -uncompress \
            | tar -tf - \
            | awk -F/ '{print $2}' \
            | uniq \
            | tee "$backup_list"
    else
        cat "$backup_list"
    fi
}

adb_list_installed() {
    if $ADB shell which cmd >/dev/null; then
        $ADB shell cmd package list packages "$@" | sed 's/^package://'
    else
        $ADB shell pm list packages "$@" | sed 's/^package://'
    fi
}

adb_list_nobackup() {
    backup="$1"
    test -z "$backup" && usage
    adb_list_installed -3 | grep -vFxf <(adb_list_backup "$backup") | sort
}

adb_pack() {
    dir="$1"
    test -d "$dir" || usage
    app="$(basename "$dir")"
    tmp_dir="$(dirname "$dir")"
    tmp_dir="$(dirname "$tmp_dir")"
    (echo -ne 'ANDROID BACKUP\n1\n1\nnone\n' && tar -C "$tmp_dir" --format=ustar -cf - -T "${tmp_dir}/$app.list" | zlib-flate -compress) >"${tmp_dir}/$app.ab"
}

adb_restore() {
    backup="$1"
    app="$2"
    test -f "$backup" || usage
    test -z "$app" && usage
    adb_unpack "$backup" "$app"
    tmp_dir="$(dirname "$backup")/tmp"
    adb_pack "${tmp_dir}/apps/${app}"
    $ADB install "${tmp_dir}/apps/${app}/a/base.apk" || true
    $ADB restore "${tmp_dir}/${app}.ab"
    appops_restore "$app"
}

adb_root() {
    if [ -n "$ADB_ROOT_FLAG" ]
    then
        return
    fi
    ADB_ROOT_FLAG=1
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" != 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB root
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 1 && start adbd"'
        fi
        $ADB wait-for-device
    fi
}

adb_unpack() {
    backup="$1"
    app="$2"
    test -z "$backup" && usage
    test -f "$backup" || usage
    tmp_dir="$(dirname "$backup")/tmp"
    mkdir -p "$tmp_dir"
    app_list="$tmp_dir/$app.list"
    tail -n +5 "$backup" | zlib-flate -uncompress | tar -C "$tmp_dir" -xvf - "apps/$app" > "$app_list"
}

adb_unroot() {
    $ADB wait-for-device
    if [ "$($ADB shell whoami)" = 'root' ]
    then
        if [ "$($ADB shell getprop ro.adb.secure)" = 0 ]
        then
            $ADB unroot
        else
            $ADB shell 'su -c "stop adbd && setprop service.adb.root 0 && start adbd"'
        fi
        $ADB wait-for-device
    fi
    ADB_ROOT_FLAG=''
}

appops_backup() {
    app="$1"
    test -z "$app" && usage
    appops="$($ADB shell cmd appops get "$app" | awk -F ' +|:|;' '{ if($3=="ignore" || $3=="allow") {print $1,$3} }' | grep -Ev '^(MONITOR_LOCATION|MONITOR_HIGH_POWER_LOCATION|NEIGHBORING_CELLS|READ_CALENDAR) ' || true)"
    if [ -n "$appops" ]
    then
        mkdir -p "$RAW_BACKUP_DIR/$app"
        echo "$appops" >"$RAW_BACKUP_DIR/$app/appops"
    fi
}

appops_backup_all() {
    for app in $(adb_list_installed -3)
    do
        appops_backup "$app"
    done
}

appops_restore() {
    app="$1"
    test -z "$app" && usage
    if [ -d "$RAW_BACKUP_DIR/$app" ]
    then
        appops_file="$RAW_BACKUP_DIR/$app/appops"
    else
        appops_file=appops/$app
    fi
    if [ ! -f "$appops_file" ]
    then
        echo "appops file not exists."
        return
    fi
    while read -r op mode
    do
        $ADB shell -n cmd appops set "$app" "$op" "$mode"
    done < "$appops_file"
}

appops_restore_all() {
    for app in $(adb_list_installed -3)
    do
        appops_restore "$app"
    done
}

appops_set_ignore () {
    app="$1"
    test -z "$app" && usage
    for op in $($ADB shell cmd appops get "$app" | awk -F: '{print $1}' | grep -Fv READ_CALENDAR || true)
    do
        $ADB shell cmd appops set "$app" "$op" ignore
    done
}

captive_portal() {
    $ADB shell settings put global captive_portal_server google.cn
    $ADB shell settings put global captive_portal_http_url http://google.cn/generate_204
    $ADB shell settings put global captive_portal_https_url https://google.cn/generate_204
}

pa_backup() {
    app="$1"
    test -z "$app" && usage
    permission_backup "$app"
    appops_backup "$app"
}

pa_backup_all() {
    for app in $(adb_list_installed -3)
    do
        pa_backup "$app"
    done
}

pa_restore() {
    app="$1"
    test -z "$app" && usage
    permission_restore "$app"
    appops_restore "$app"
}

pa_restore_all() {
    for app in $(adb_list_installed -3)
    do
        pa_restore "$app"
    done
}

permission_backup() {
    app="$1"
    test -z "$app" && usage
    permission="$($ADB shell dumpsys package "$app" | awk -F' +|:|,' '/runtime permissions:$/{flag=1;next}/(:$|^$)/{flag=0} {if(flag) {if($4=="granted=true") {print $2, "grant"} else if($4=="granted=false") {print $2, "revoke"}}}')"
    permission_file="$RAW_BACKUP_DIR/$app/permission"
    if [ -n "$permission" ]
    then
        if [ -e "$permission_file" ]
        then
            revoke="$(grep -vFxf <(echo "$permission") "$permission_file" | awk '{if($2=="grant") {print $1, "revoke"}}')"
            if [ -n "$revoke" ]
            then
                echo "$revoke"  >> "${permission_file}.revoke"
            fi
        fi
        echo "$permission" >"$permission_file"
    fi
}

permission_backup_all() {
    for app in $(adb_list_installed -3)
    do
        permission_backup "$app"
    done
}

raw_backup() {
    app="$1"
    test -z "$app" && usage
    rsync_start
    $ADB shell am force-stop "$app"
    mkdir -p "$RAW_BACKUP_DIR/$app"
    apk="$($ADB shell pm path "$app")"
    apk="${apk:8}"
    rsync_password
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync "${RSYNC_BASE_PATH}${apk}" "$RAW_BACKUP_DIR/$app/$app.apk"
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "${RSYNC_BASE_PATH}/data/data/$app/" "$RAW_BACKUP_DIR/$app/data/"
    permission_backup "$app"
    appops_backup "$app"
}

raw_backup_all() {
    raw_backup_spefial
    for app in $(adb_list_installed -3)
    do
        raw_backup "$app"
    done
}

raw_backup_spefial() {
    rsync_start
    mkdir -p "$RAW_BACKUP_DIR/spefial/data"
    rsync_password
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --ignore-missing-args --files-from="$ABR_DIR/spefial.list" "${RSYNC_BASE_PATH}/" "$RAW_BACKUP_DIR/spefial/"
}

raw_restore() {
    app="$1"
    test -z "$app" && usage
    rsync_start
    $ADB install "$RAW_BACKUP_DIR/$app/$app.apk" || true
    $ADB shell am force-stop "$app"
    user="$($ADB shell stat -c '%U:%G' "/data/data/$app")"
    rsync_password
    RSYNC_PASSWORD="$RSYNC_PASSWORD" rsync -a --chown="$user" --exclude="/cache/" --exclude="/code_cache/" --exclude="/lib" "$RAW_BACKUP_DIR/$app/data/" "${RSYNC_BASE_PATH}/data/data/$app/"
    $ADB shell restorecon -R "/data/data/$app"
    appops_restore "$app"
}

rsync_password() {
    if [ -z "$RSYNC_PASSWORD" ]
    then
        RSYNC_PASSWORD="$($ADB shell cat /mnt/secure/rsyncd.secrets)"
        RSYNC_PASSWORD="${RSYNC_PASSWORD:7}"
    fi
}

rsync_start() {
    if [ -n "$RSYNC_START_FLAG" ]
    then
        return
    fi
    RSYNC_START_FLAG=1
    adb_root
    if ! adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'cat >/mnt/secure/rsyncd.conf' <<EOF
address = 127.0.0.1
gid = root
pid file = /mnt/secure/rsyncd.pid
read only = false
uid = root
use chroot = false
[data]
  auth users = backup
  hosts allow = 127.0.0.1
  path = /data
  secrets file = /mnt/secure/rsyncd.secrets
EOF
        password="$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c 16)"
        $ADB shell 'cat >/mnt/secure/rsyncd.secrets' <<EOF
backup:${password}
EOF
        $ADB shell chmod 600 /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets
        $ADB shell -t rsync --daemon --config=/mnt/secure/rsyncd.conf
    fi
    adb forward "tcp:$RSYNC_LOCAL_PORT" tcp:873
}

rsync_stop() {
    if adb shell test -e /mnt/secure/rsyncd.pid
    then
        $ADB shell 'kill $(cat /mnt/secure/rsyncd.pid)'
    fi
    $ADB shell rm /mnt/secure/rsyncd.conf /mnt/secure/rsyncd.secrets || true
    $ADB forward --remove "tcp:$RSYNC_LOCAL_PORT" || true
    adb_unroot
    RSYNC_START_FLAG=''
}

if type "$action" 2>/dev/null | grep -qF "function"
then
    shift
    $action "$@"
else
    usage
fi
